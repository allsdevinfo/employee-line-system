// routes/webhook.js - LINE Webhook Handler
const express = require('express');
const router = express.Router();
const lineConfig = require('../config/line');
const dbConfig = require('../config/database');
const { responseHelpers, dateHelpers, textHelpers } = require('../utils/helpers');
const { asyncHandler } = require('../middleware/errorHandler');

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE Signature
function verifyLineSignature(req, res, next) {
    const signature = req.get('X-Line-Signature');
    const body = JSON.stringify(req.body);
    
    if (!signature) {
        return res.status(400).json(responseHelpers.error('Missing LINE signature', 'MISSING_SIGNATURE'));
    }
    
    try {
        if (!lineConfig.verifySignature(body, signature)) {
            return res.status(400).json(responseHelpers.error('Invalid LINE signature', 'INVALID_SIGNATURE'));
        }
    } catch (error) {
        console.error('Signature verification error:', error);
        return res.status(400).json(responseHelpers.error('Signature verification failed', 'SIGNATURE_ERROR'));
    }
    
    next();
}

// POST / - LINE Webhook endpoint
router.post('/', verifyLineSignature, asyncHandler(async (req, res) => {
    const events = req.body.events || [];
    
    console.log('LINE Webhook received:', JSON.stringify(req.body, null, 2));
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• events ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    for (const event of events) {
        try {
            await handleLineEvent(event);
        } catch (error) {
            console.error('Error handling LINE event:', error);
        }
    }
    
    res.status(200).json({ status: 'OK' });
}));

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE events ‡∏´‡∏•‡∏±‡∏Å
async function handleLineEvent(event) {
    const { type, source, message, postback, replyToken } = event;
    const userId = source?.userId;
    
    if (!userId) {
        console.error('No userId in event');
        return;
    }
    
    try {
        switch (type) {
            case 'message':
                if (message) {
                    await handleMessageEvent(userId, message, replyToken);
                }
                break;
                
            case 'postback':
                if (postback) {
                    await handlePostbackEvent(userId, postback, replyToken);
                }
                break;
                
            case 'follow':
                await handleFollowEvent(userId);
                break;
                
            case 'unfollow':
                await handleUnfollowEvent(userId);
                break;
                
            default:
                console.log('Unhandled event type:', type);
        }
    } catch (error) {
        console.error('Error in handleLineEvent:', error);
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function handleMessageEvent(userId, message, replyToken) {
    if (message.type !== 'text') {
        return;
    }
    
    const text = message.text.toLowerCase().trim();
    const client = lineConfig.getClient();
    
    if (!client) {
        console.error('LINE client not configured');
        return;
    }
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [employees] = await dbConfig.execute(
            'SELECT * FROM employees WHERE line_user_id = ? AND status = "active"',
            [userId]
        );
        
        let replyMessage = null;
        
        if (employees.length === 0) {
            // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending
            const [pending] = await dbConfig.execute(
                'SELECT * FROM employees WHERE line_user_id = ? AND status = "pending"', [userId]
            );
            if (pending.length > 0) {
                replyMessage = { type: 'text', text: 'üì® ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å HR ‡∏Ñ‡∏£‡∏±‡∏ö' };
            } else {
                replyMessage = { type: 'text', text: 'üö´ ‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô LIFF ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ HR' };
            }

            // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            // replyMessage = {
            //     type: 'text',
            //     text: 'üö´ ‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å HR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö\n\nüìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ‡πÅ‡∏ú‡∏ô‡∏Å HR'
            // };
        } else {
            // ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            const employee = employees[0];
            replyMessage = await generateEmployeeReply(employee, text);
        }
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if (replyMessage && replyToken) {
            await client.replyMessage(replyToken, replyMessage);
        }
        
    } catch (error) {
        console.error('Error in handleMessageEvent:', error);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        if (replyToken && client) {
            try {
                await client.replyMessage(replyToken, {
                    type: 'text',
                    text: 'üòÖ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                });
            } catch (replyError) {
                console.error('Error sending error reply:', replyError);
            }
        }
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
async function generateEmployeeReply(employee, text) {
    const liffUrl = lineConfig.liffId ? `https://liff.line.me/${lineConfig.liffId}` : 'https://your-liff-url.com';
    
    if (text.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || text.includes('hello') || text.includes('hi')) {
        return {
            type: 'text',
            text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${employee.name}! üëã\n\n‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ`
        };
        
    } else if (text.includes('help') || text.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠')) {
        return {
            type: 'text',
            text: `üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n` +
                  `‚Ä¢ "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô" - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô\n` +
                  `‚Ä¢ "‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå" - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô\n` +
                  `‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n` +
                  `‚Ä¢ "‡∏•‡∏≤" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤\n` +
                  `‚Ä¢ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£" - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£\n` +
                  `‚Ä¢ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n\n` +
                  `‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`
        };
        
    } else if (text.includes('‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô') || text.includes('checkin')) {
        return {
            type: 'text',
            text: `‚è∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö LIFF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á\n\nüëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö`,
            quickReply: {
                items: [
                    {
                        type: 'action',
                        action: {
                            type: 'uri',
                            label: 'üè¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                            uri: liffUrl
                        }
                    }
                ]
            }
        };
        
    } else if (text.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || text.includes('status')) {
        return await getEmployeeStatus(employee);
        
    } else if (text.includes('‡∏•‡∏≤') || text.includes('leave')) {
        return await getLeaveInfo(employee, liffUrl);
        
    } else if (text.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£') || text.includes('welfare') || text.includes('benefit')) {
        return await getWelfareInfo(employee, liffUrl);
        
    } else if (text.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥') || text.includes('history')) {
        return {
            type: 'text',
            text: `üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö LIFF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n\nüëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö`,
            quickReply: {
                items: [
                    {
                        type: 'action',
                        action: {
                            type: 'uri',
                            label: 'üìä ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
                            uri: liffUrl
                        }
                    }
                ]
            }
        };
        
    } else {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        return {
            type: 'text',
            text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${employee.name}! üòä\n\n‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≤\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`,
            quickReply: {
                items: [
                    {
                        type: 'action',
                        action: {
                            type: 'message',
                            label: '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                            text: 'help'
                        }
                    },
                    {
                        type: 'action',
                        action: {
                            type: 'uri',
                            label: 'üè¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                            uri: liffUrl
                        }
                    }
                ]
            }
        };
    }
}

// ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
async function getEmployeeStatus(employee) {
    try {
        const today = dateHelpers.getCurrentDate();
        const [attendance] = await dbConfig.execute(
            'SELECT * FROM attendance WHERE employee_id = ? AND date = ?',
            [employee.id, today]
        );
        
        let statusText = '';
        if (attendance.length === 0) {
            statusText = '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
        } else {
            const record = attendance[0];
            statusText = `üìÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${dateHelpers.formatDate(new Date())})\n\n`;
            
            if (record.check_in_time) {
                statusText += `‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: ${dateHelpers.formatTime(record.check_in_time)}\n`;
            }
            
            if (record.check_out_time) {
                statusText += `üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: ${dateHelpers.formatTime(record.check_out_time)}\n`;
                statusText += `‚è±Ô∏è ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${record.work_hours || 0} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
                
                if (record.overtime_hours > 0) {
                    statusText += `üåô ‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${record.overtime_hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
                }
            } else if (record.check_in_time) {
                statusText += `üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...\n`;
            }
            
            statusText += `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${textHelpers.getStatusText(record.status)}`;
        }
        
        return {
            type: 'text',
            text: statusText
        };
    } catch (error) {
        console.error('Error getting employee status:', error);
        return {
            type: 'text',
            text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        };
    }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤
async function getLeaveInfo(employee, liffUrl) {
    try {
        const [benefits] = await dbConfig.execute(
            'SELECT * FROM employee_benefits WHERE employee_id = ?',
            [employee.id]
        );
        
        const benefit = benefits[0] || {
            vacation_days_total: 10,
            vacation_days_used: 0,
            sick_days_total: 30,
            sick_days_used: 0
        };
        
        const [pendingLeaves] = await dbConfig.execute(
            'SELECT COUNT(*) as count FROM leave_requests WHERE employee_id = ? AND status = "pending"',
            [employee.id]
        );
        
        const leaveText = `üå¥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤\n\n` +
                         `üìä ‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô:\n` +
                         `   ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${benefit.vacation_days_used}/${benefit.vacation_days_total} ‡∏ß‡∏±‡∏ô\n` +
                         `   ‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${benefit.vacation_days_total - benefit.vacation_days_used} ‡∏ß‡∏±‡∏ô\n\n` +
                         `üè• ‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢:\n` +
                         `   ‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${benefit.sick_days_used}/${benefit.sick_days_total} ‡∏ß‡∏±‡∏ô\n` +
                         `   ‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${benefit.sick_days_total - benefit.sick_days_used} ‡∏ß‡∏±‡∏ô\n\n` +
                         `‚è≥ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${pendingLeaves[0].count} ‡∏Ñ‡∏≥‡∏Ç‡∏≠\n\n` +
                         `üí° ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö LIFF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà`;
        
        return {
            type: 'text',
            text: leaveText,
            quickReply: {
                items: [
                    {
                        type: 'action',
                        action: {
                            type: 'uri',
                            label: 'üìù ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤',
                            uri: liffUrl
                        }
                    }
                ]
            }
        };
    } catch (error) {
        console.error('Error getting leave info:', error);
        return {
            type: 'text',
            text: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        };
    }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£
async function getWelfareInfo(employee, liffUrl) {
    const welfareText = `üéÅ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n\n` +
                       `üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${employee.salary ? employee.salary.toLocaleString() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ö‡∏≤‡∏ó\n` +
                       `üìÖ ‡∏ß‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢: 25 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n` +
                       `üè• ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n` +
                       `üå¥ ‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô: 10 ‡∏ß‡∏±‡∏ô/‡∏õ‡∏µ\n` +
                       `ü§í ‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢: 30 ‡∏ß‡∏±‡∏ô/‡∏õ‡∏µ\n\n` +
                       `üì± ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö LIFF`;
    
    return {
        type: 'text',
        text: welfareText,
        quickReply: {
            items: [
                {
                    type: 'action',
                    action: {
                        type: 'uri',
                        label: 'üéÅ ‡∏î‡∏π‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£',
                        uri: liffUrl
                    }
                }
            ]
        }
    };
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback events
async function handlePostbackEvent(userId, postback, replyToken) {
    const { data } = postback;
    const client = lineConfig.getClient();
    
    if (!client || !replyToken) {
        console.error('LINE client not configured or no reply token');
        return;
    }
    
    console.log('Postback received:', data);
    
    let replyMessage = null;
    
    try {
        if (data === 'get_help') {
            replyMessage = {
                type: 'text',
                text: `üìã ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô Employee System\n\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n\nüìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ HR ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤`
            };
        } else if (data === 'show_menu') {
            const liffUrl = lineConfig.liffId ? `https://liff.line.me/${lineConfig.liffId}` : 'https://your-liff-url.com';
            replyMessage = {
                type: 'text',
                text: `üì± ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏∞‡∏ö‡∏ö\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:`,
                quickReply: {
                    items: [
                        {
                            type: 'action',
                            action: {
                                type: 'uri',
                                label: 'üè¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                                uri: liffUrl
                            }
                        },
                        {
                            type: 'action',
                            action: {
                                type: 'message',
                                label: 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                                text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
                            }
                        },
                        {
                            type: 'action',
                            action: {
                                type: 'message',
                                label: 'üå¥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤',
                                text: '‡∏•‡∏≤'
                            }
                        }
                    ]
                }
            };
        }
        
        if (replyMessage) {
            await client.replyMessage(replyToken, replyMessage);
        }
    } catch (error) {
        console.error('Error in handlePostbackEvent:', error);
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ follow
async function handleFollowEvent(userId) {
    const client = lineConfig.getClient();

     const [rows] = await dbConfig.execute('SELECT id FROM employees WHERE line_user_id=?',[userId]);
        if(rows.length===0){
            await dbConfig.execute(
            `INSERT INTO employees (line_user_id, name, status, created_at, updated_at)
            VALUES (?, '(‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)', 'pending', NOW(), NOW())`, [userId]
            );
        }

    
    if (!client) {
        console.error('LINE client not configured');
        return;
    }
    
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [employees] = await dbConfig.execute(
            'SELECT * FROM employees WHERE line_user_id = ? AND status = "active"',
            [userId]
        );
        
        let welcomeMessage;
        
        if (employees.length === 0) {
            // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            welcomeMessage = {
                type: 'text',
                text: `üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô!\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô - Employee System\n\n‚ùó ‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å HR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö\n\nüìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ‡πÅ‡∏ú‡∏ô‡∏Å HR`
            };
        } else {
            // ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            const employee = employees[0];
            const liffUrl = lineConfig.liffId ? `https://liff.line.me/${lineConfig.liffId}` : 'https://your-liff-url.com';
            
            welcomeMessage = {
                type: 'flex',
                altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                contents: {
                    type: 'bubble',
                    header: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!',
                                weight: 'bold',
                                size: 'lg',
                                color: '#ffffff'
                            }
                        ],
                        backgroundColor: '#667eea',
                        paddingAll: 'lg'
                    },
                    body: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${employee.name}!`,
                                weight: 'bold',
                                size: 'xl',
                                margin: 'md'
                            },
                            {
                                type: 'text',
                                text: `${employee.position || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'} ‚Ä¢ ${employee.department || '‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}`,
                                size: 'sm',
                                color: '#666666',
                                margin: 'md'
                            },
                            {
                                type: 'separator',
                                margin: 'lg'
                            },
                            {
                                type: 'text',
                                text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:',
                                size: 'md',
                                margin: 'lg'
                            },
                            {
                                type: 'text',
                                text: '‚Ä¢ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î\n‚Ä¢ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                                size: 'sm',
                                color: '#666666',
                                margin: 'md'
                            }
                        ]
                    },
                    footer: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'button',
                                action: {
                                    type: 'uri',
                                    label: 'üè¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                                    uri: liffUrl
                                },
                                style: 'primary',
                                color: '#667eea'
                            },
                            {
                                type: 'button',
                                action: {
                                    type: 'message',
                                    label: '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                                    text: 'help'
                                },
                                style: 'secondary',
                                margin: 'sm'
                            }
                        ]
                    }
                }
            };
        }
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        await client.pushMessage(userId, welcomeMessage);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£ follow
        console.log(`User followed: ${userId}`, {
            isEmployee: employees.length > 0,
            employeeName: employees.length > 0 ? employees[0].name : null,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('Error in handleFollowEvent:', error);
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ unfollow
async function handleUnfollowEvent(userId) {
    console.log('User unfollowed:', {
        userId: userId,
        timestamp: new Date().toISOString()
    });
    
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
        const [employees] = await dbConfig.execute(
            'SELECT name, employee_code FROM employees WHERE line_user_id = ?',
            [userId]
        );
        
        if (employees.length > 0) {
            console.log('Employee unfollowed:', {
                employeeCode: employees[0].employee_code,
                employeeName: employees[0].name,
                userId: userId
            });
        }
    } catch (error) {
        console.error('Error handling unfollow event:', error);
    }
}

// GET / - Webhook verification
router.get('/', (req, res) => {
    res.status(200).json({
        status: 'Webhook is running',
        timestamp: new Date().toISOString(),
        service: 'Employee LINE System Webhook'
    });
});

// Error handling middleware
router.use((error, req, res, next) => {
    console.error('Webhook error:', error);
    res.status(500).json({ 
        status: 'error',
        message: 'Internal server error',
        timestamp: new Date().toISOString()
    });
});

module.exports = router;