(() => {
  // ---------- Helpers ----------
  const $  = (sel, el=document) => el.querySelector(sel);
  const $$ = (sel, el=document) => Array.from(el.querySelectorAll(sel));

  const CONFIG = {
    LIFF_ID: null,
    API_BASE: null,
    ENV: 'production',
  };

  const sleep = ms => new Promise(r => setTimeout(r, ms));

  async function jsonFetch(url, options = {}) {
    const res = await fetch(url, {
      headers: { 'Content-Type': 'application/json', ...(options.headers||{}) },
      ...options
    });
    let body = null;
    try { body = await res.json(); } catch {}
    if (!res.ok) {
      const msg = body?.error || body?.message || res.statusText || 'Request failed';
      const e = new Error(msg);
      e.code = body?.code;
      e.status = res.status;
      throw e;
    }
    return body;
  }

  // ---------- UI helpers ----------
  const UI = {
    showApp(){ const el = $('#app'); if (el) el.style.display = 'block'; },
    hideLoading(){ const el = $('#loading'); if (el) el.style.display = 'none'; },
    showModal(){ const m = $('#modal'); if (m){ m.style.display='block'; document.body.style.overflow='hidden'; } },
    closeModal(){ const m = $('#modal'); if (m){ m.style.display='none'; document.body.style.overflow=''; } },
    messageTimer: null,
    toast(msg, type='info', ms=3000){
      const el = $('#message'); if(!el) return;
      el.textContent = msg; el.className = `message ${type}`; el.style.display = 'block';
      clearTimeout(UI.messageTimer);
      UI.messageTimer = setTimeout(()=>{ el.style.display = 'none'; }, ms);
    },
    setHeader(name, statusText, statusClass){
      const nameEl = $('#employee-name'); if (nameEl) nameEl.textContent = name || '-';
      const stEl = $('#work-status'); if (stEl){ stEl.textContent = statusText; stEl.className = `status ${statusClass}`; }
    },
    disableMainButtons(disabled=true){
      ['btn-checkin','btn-leave','btn-welfare','btn-history'].forEach(id=>{
        const el = document.getElementById(id);
        if (el){ el.disabled = disabled; el.style.opacity = disabled? .6 : 1; }
      });
    },
    showPendingCard(text){
      const box = $('#today-status');
      if (!box) return;
      box.innerHTML = `
        <div class="card" style="text-align:center">
          <h3>‚è≥ ${text}</h3>
          <p style="color:#666">‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
          <p style="color:#999;font-size:13px">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
        </div>
      `;
    },
    showProblemCard(text){
      const box = $('#today-status');
      if (!box) return;
      box.innerHTML = `
        <div class="card" style="text-align:center">
          <h3>‚ö†Ô∏è ${text}</h3>
          <p style="color:#666">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ HR/IT</p>
        </div>
      `;
    },
    setTodaySummary(att){
      const elIn  = $('#checkin-time');
      const elOut = $('#checkout-time');
      const elHr  = $('#work-hours');
      const elSt  = $('#attendance-status');
      if (!att?.hasData){
        if (elIn)  elIn.textContent  = '-';
        if (elOut) elOut.textContent = '-';
        if (elHr)  elHr.textContent  = '0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';
        if (elSt)  elSt.textContent  = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô';
        return;
      }
      if (elIn)  elIn.textContent  = att.checkInTime  || '-';
      if (elOut) elOut.textContent = att.checkOutTime || '-';
      const hours = att.finalWorkHours ?? att.currentWorkHours ?? 0;
      if (elHr)  elHr.textContent  = `${parseFloat(hours)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
      if (elSt)  elSt.textContent  = App.getStatusText(att.status);
    },
    paintAttendanceButton(att){
      const btn = $('#btn-checkin'); if (!btn) return;
      const icon = btn.querySelector('.menu-icon');
      const title = btn.querySelector('.menu-title');
      const sub = btn.querySelector('.menu-subtitle');

      if (att?.isWorkingNow){
        if (icon)  icon.textContent  = 'üèÉ‚Äç‚ôÇÔ∏è';
        if (title) title.textContent = '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå';
        if (sub)   sub.textContent   = 'Check Out';
        btn.style.background = 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)';
        btn.style.color = '#fff';
        btn.disabled = false;
        return;
      }
      if (att?.isComplete){
        if (icon)  icon.textContent  = '‚úÖ';
        if (title) title.textContent = '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
        if (sub)   sub.textContent   = 'Completed';
        btn.style.background = '#6c757d';
        btn.style.color = '#fff';
        btn.disabled = true;
        return;
      }
      if (icon)  icon.textContent  = '‚è∞';
      if (title) title.textContent = '‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô';
      if (sub)   sub.textContent   = 'Check In/Out';
      btn.style.background = '';
      btn.style.color = '';
      btn.disabled = false;
    }
  };

  // ---------- App ----------
  const App = {
    userId: null,
    employee: null,
    today: null,
    isLiffReady: false,

    async init(){
      try {
        // 1) ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
        const cfg = await jsonFetch(`${location.origin}/api/config`).catch(()=>null);
        CONFIG.LIFF_ID = cfg?.data?.liffId || (window.__APP_CONFIG__?.LIFF_ID ?? '');
        CONFIG.API_BASE = cfg?.data?.apiBase || (window.__APP_CONFIG__?.API_BASE ?? '/api');
        CONFIG.ENV = cfg?.data?.env || (window.__APP_CONFIG__?.ENV ?? 'production');
        console.log('[CONFIG]', CONFIG);

        // 2) ‡πÄ‡∏£‡∏¥‡πà‡∏° LIFF
        if (typeof liff === 'undefined') throw new Error('LIFF SDK not loaded');
        await liff.init({ liffId: CONFIG.LIFF_ID });
        this.isLiffReady = true;

        if (!liff.isLoggedIn()){
          liff.login();
          return;
        }

        const profile = await liff.getProfile();
        this.userId = profile.userId;

        // 3) Identify -> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        const identify = await jsonFetch(`${CONFIG.API_BASE}/auth/identify`, {
          method: 'POST',
          body: JSON.stringify({ displayName: profile.displayName }),
          headers: { 'X-User-ID': this.userId }
        }).catch(e => {
          if (e.status === 202) return { data: { status: 'pending', name: profile.displayName } };
          throw e;
        });

        const status = identify?.data?.status;

        if (status === 'inactive'){
          UI.hideLoading(); UI.showApp();
          UI.setHeader(profile.displayName, '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö', 'off-work');
          UI.disableMainButtons(true);
          UI.showPendingCard('‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ HR');
          return;
        }

        if (status === 'pending'){
          UI.hideLoading(); UI.showApp();
          UI.setHeader(`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${profile.displayName}`, '‡∏£‡∏≠ HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', 'should-work');
          UI.disableMainButtons(true);
          UI.showPendingCard('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');
          return;
        }

        // 4) active -> ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await this.loadEmployee().catch(err => {
          // ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ /api/employee ‡∏û‡∏±‡∏á (500)
          console.error('loadEmployee failed:', err);
          UI.setHeader(profile.displayName, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', 'off-work');
          UI.disableMainButtons(true);
          UI.showProblemCard('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå');
          throw err; // ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ catch ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á fallback ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        });

        await this.loadToday().catch(()=>{ /* ‡πÑ‡∏°‡πà critical */ });
        UI.hideLoading(); UI.showApp();

        UI.setHeader(`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${this.employee.name}`, this.getWorkStatusInfo(this.today).text, this.getWorkStatusInfo(this.today).className);
        UI.setTodaySummary(this.today);
        UI.paintAttendanceButton(this.today);

      } catch (err) {
        console.error(err);
        UI.toast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ', 'error', 5000);
        UI.hideLoading(); UI.showApp();
        const appEl = $('#app');
        if (appEl) {
          appEl.innerHTML = `
            <div style="text-align:center;padding:40px">
              <div style="font-size:64px;margin-bottom:20px">‚ö†Ô∏è</div>
              <h2 style="color:#666;margin-bottom:16px">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ</h2>
              <p style="color:#999;margin-bottom:24px">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å IT</p>
              <button class="btn btn-primary" onclick="location.reload()">üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
            </div>
          `;
        }
      }
    },

    // ----- API -----
    async loadEmployee(){
      const res = await jsonFetch(`${CONFIG.API_BASE}/employee`, {
        headers: { 'X-User-ID': this.userId }
      });
      this.employee = res.data;
      if (!this.employee || !this.employee.id) {
        throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå');
      }
    },

    async loadToday(){
      const res = await jsonFetch(`${CONFIG.API_BASE}/attendance/today`, {
        headers: { 'X-User-ID': this.userId }
      }).catch(() => ({ data: { hasData:false }}));
      this.today = res.data || { hasData:false };
    },

    // ----- Attendance -----
    async onAttendance(){
      try {
        if (!this.employee){ UI.toast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô','error'); return; }

        const isCheckout = !!this.today?.isWorkingNow;
        const action = isCheckout ? 'checkout' : 'checkin';

        UI.toast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á...', 'info');

        const location = await this.getLocation();
        UI.toast(`‡∏Å‡∏≥‡∏•‡∏±‡∏á${isCheckout ? '‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå':'‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô'}...`, 'info');

        const res = await jsonFetch(`${CONFIG.API_BASE}/attendance`, {
          method: 'POST',
          headers: { 'X-User-ID': this.userId },
          body: JSON.stringify({ action, location })
        });

        UI.toast(res.message || '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success', 4000);

        await this.loadToday();
        UI.setTodaySummary(this.today);
        UI.paintAttendanceButton(this.today);

        if (this.isLiffReady && liff.isApiAvailable('sendMessages')){
          try { await liff.sendMessages([{ type:'text', text:`‚úÖ ${res.message}` }]); } catch {}
        }
      } catch (e) {
        UI.toast(e.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'error', 5000);
      }
    },

    // ----- Leave -----
    openLeaveForm(){
      const title = $('#modal-title');
      const body  = $('#modal-body');
      if (title) title.textContent = '‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î';
      if (body) {
        const today = new Date().toISOString().slice(0,10);
        body.innerHTML = `
          <form id="leave-form">
            <div class="form-group">
              <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ <span style="color:red">*</span></label>
              <select name="leaveType" required>
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó --</option>
                <option value="sick">üè• ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢</option>
                <option value="personal">üë§ ‡∏•‡∏≤‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</option>
                <option value="vacation">üå¥ ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô</option>
                <option value="emergency">üö® ‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</option>
                <option value="maternity">üë∂ ‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î</option>
                <option value="paternity">üë®‚Äçüë∂ ‡∏•‡∏≤‡∏ö‡∏¥‡∏î‡∏≤</option>
              </select>
            </div>
            <div class="form-group">
              <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤ (‡πÄ‡∏£‡∏¥‡πà‡∏°) <span style="color:red">*</span></label>
              <input type="date" name="startDate" required min="${today}">
            </div>
            <div class="form-group">
              <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤ (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î) <span style="color:red">*</span></label>
              <input type="date" name="endDate" required min="${today}">
            </div>
            <div class="form-group">
              <label>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• <span style="color:red">*</span></label>
              <textarea rows="4" name="reason" minlength="10" maxlength="500" required placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£..."></textarea>
            </div>
            <div class="form-buttons">
              <button type="button" class="btn btn-secondary" id="btn-cancel-leave">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              <button type="submit" class="btn btn-primary">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠</button>
            </div>
          </form>
        `;
        const form = $('#leave-form');
        const cancel = $('#btn-cancel-leave');
        if (cancel) cancel.onclick = UI.closeModal;
        if (form) form.onsubmit = (e)=>this.submitLeave(e);
      }
      UI.showModal();
    },

    async submitLeave(e){
      e.preventDefault();
      const form = e.target;
      const data = Object.fromEntries(new FormData(form).entries());

      if (new Date(data.endDate) < new Date(data.startDate)){
        UI.toast('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'error');
        return;
      }

      try {
        UI.toast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤...', 'info');
        const res = await jsonFetch(`${CONFIG.API_BASE}/leave`, {
          method: 'POST',
          headers: { 'X-User-ID': this.userId },
          body: JSON.stringify(data)
        });
        UI.toast('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', 'success', 4000);
        UI.closeModal();

        if (this.isLiffReady && liff.isApiAvailable('sendMessages')){
          const map = { sick:'‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', personal:'‡∏•‡∏≤‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß', vacation:'‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô', emergency:'‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', maternity:'‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î', paternity:'‡∏•‡∏≤‡∏ö‡∏¥‡∏î‡∏≤' };
          const text = `üìù ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${map[data.leaveType]}\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${data.startDate} ‡∏ñ‡∏∂‡∏á ${data.endDate}\n‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤`;
          try { await liff.sendMessages([{ type:'text', text }]); } catch {}
        }
      } catch (err) {
        UI.toast(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤', 'error', 5000);
      }
    },

    // ----- Utils -----
    async getLocation(){
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) return reject(new Error('‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'));
        navigator.geolocation.getCurrentPosition(
          pos => resolve({
            latitude:  pos.coords.latitude,
            longitude: pos.coords.longitude,
            accuracy:  pos.coords.accuracy
          }),
          err => {
            const map = {1:'‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á',2:'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ',3:'‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'};
            reject(new Error(map[err.code] || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á'));
          },
          { enableHighAccuracy:true, timeout:15000, maximumAge:30000 }
        );
      });
    },

    getWorkStatusInfo(att){
      if (!att) return { text:'üî¥ ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', className:'off-work' };
      if (att.isWorkingNow) return { text:'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', className:'working' };
      if (att.isComplete)   return { text:'‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß', className:'off-work' };
      const h = new Date().getHours();
      if (h >= 9 && h <= 18) return { text:'üü° ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', className:'should-work' };
      return { text:'üî¥ ‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', className:'off-work' };
    },

    getStatusText(s){
      const map = { present:'‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥', late:'‚ö†Ô∏è ‡∏™‡∏≤‡∏¢', absent:'‚ùå ‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô', half_day:'‚è∞ ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô', holiday:'üèñÔ∏è ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î' };
      return map[s] || s || '-';
    }
  };

  // ---------- Wire UI ----------
  window.employeeApp = App; // for console debugging
  // export handlers for inline onclick (‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß)
  window.handleAttendance = () => App.onAttendance();
  window.showLeaveForm   = () => App.openLeaveForm();
  window.showWelfare     = () => UI.toast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ','info');
  window.showHistory     = () => UI.toast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ','info');

  document.addEventListener('DOMContentLoaded', () => {
    const btnCheck = $('#btn-checkin');
    if (btnCheck) btnCheck.addEventListener('click', () => App.onAttendance());

    const btnLeave = $('#btn-leave');
    if (btnLeave) btnLeave.addEventListener('click', () => App.openLeaveForm());

    const btnWelfare = $('#btn-welfare');
    if (btnWelfare) btnWelfare.addEventListener('click', () => UI.toast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ', 'info'));

    const btnHistory = $('#btn-history');
    if (btnHistory) btnHistory.addEventListener('click', () => UI.toast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ', 'info'));

    const closeX = $('.close');
    if (closeX) closeX.addEventListener('click', UI.closeModal);

    App.init();
  });

  window.addEventListener('error', () => UI.toast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'error', 5000));
  window.addEventListener('unhandledrejection', () => UI.toast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'error', 5000));
})();
