// utils/lineMessaging.js
const lineConfig = require('../config/line');
const { textHelpers, dateHelpers } = require('./helpers');

class LineMessagingService {
    constructor() {
        this.client = lineConfig.getClient();
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô
    async sendCheckInNotification(userId, checkInData) {
        try {
            const { checkInTime, isLate, lateMinutes, location } = checkInData;
            
            let message = `‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n`;
            message += `üïò ‡πÄ‡∏ß‡∏•‡∏≤: ${dateHelpers.formatTime(checkInTime)}\n`;
            
            if (isLate) {
                message += `‚ö†Ô∏è ‡∏™‡∏≤‡∏¢: ${lateMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ\n`;
            } else {
                message += `‚ú® ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n`;
            }
            
            message += `üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n`;
            message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateHelpers.formatDate(new Date())}`;

            const messages = [
                {
                    type: 'text',
                    text: message
                },
                {
                    type: 'sticker',
                    packageId: '1',
                    stickerId: isLate ? '14' : '2'
                }
            ];

            await this.client.pushMessage(userId, messages);
            return true;
        } catch (error) {
            console.error('Error sending check-in notification:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
    async sendCheckOutNotification(userId, checkOutData) {
        try {
            const { checkOutTime, workHours, overtimeHours } = checkOutData;
            
            let message = `üèÉ‚Äç‚ôÇÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n`;
            message += `üïï ‡πÄ‡∏ß‡∏•‡∏≤: ${dateHelpers.formatTime(checkOutTime)}\n`;
            message += `‚è±Ô∏è ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${workHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
            
            if (overtimeHours > 0) {
                message += `üåô ‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${overtimeHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n`;
            }
            
            message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateHelpers.formatDate(new Date())}\n`;
            message += `üëè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!`;

            await this.client.pushMessage(userId, {
                type: 'text',
                text: message
            });
            return true;
        } catch (error) {
            console.error('Error sending check-out notification:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤
    async sendLeaveRequestNotification(userId, leaveData) {
        try {
            const { leaveType, startDate, endDate, daysCount, reason } = leaveData;
            
            let message = `üìù ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n`;
            message += `üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${textHelpers.getLeaveTypeText(leaveType)}\n`;
            message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateHelpers.formatDate(startDate)}`;
            
            if (startDate !== endDate) {
                message += ` ‡∏ñ‡∏∂‡∏á ${dateHelpers.formatDate(endDate)}`;
            }
            
            message += `\nüóìÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${daysCount} ‡∏ß‡∏±‡∏ô\n`;
            message += `üí¨ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${textHelpers.truncateText(reason, 50)}\n\n`;
            message += `‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤`;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            const flexMessage = {
                type: 'flex',
                altText: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤',
                contents: {
                    type: 'bubble',
                    header: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: 'üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î',
                                weight: 'bold',
                                size: 'lg',
                                color: '#ffffff'
                            }
                        ],
                        backgroundColor: '#667eea',
                        paddingAll: 'lg'
                    },
                    body: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 2
                                    },
                                    {
                                        type: 'text',
                                        text: textHelpers.getLeaveTypeText(leaveType),
                                        size: 'sm',
                                        flex: 4,
                                        wrap: true
                                    }
                                ],
                                margin: 'md'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 2
                                    },
                                    {
                                        type: 'text',
                                        text: startDate === endDate ? 
                                            dateHelpers.formatDate(startDate) :
                                            `${dateHelpers.formatDate(startDate)} - ${dateHelpers.formatDate(endDate)}`,
                                        size: 'sm',
                                        flex: 4,
                                        wrap: true
                                    }
                                ],
                                margin: 'md'
                            },
                            {
                                type: 'box',
                                layout: 'baseline',
                                contents: [
                                    {
                                        type: 'text',
                                        text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô:',
                                        size: 'sm',
                                        color: '#666666',
                                        flex: 2
                                    },
                                    {
                                        type: 'text',
                                        text: `${daysCount} ‡∏ß‡∏±‡∏ô`,
                                        size: 'sm',
                                        flex: 4
                                    }
                                ],
                                margin: 'md'
                            },
                            {
                                type: 'box',
                                layout: 'vertical',
                                contents: [
                                    {
                                        type: 'text',
                                        text: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:',
                                        size: 'sm',
                                        color: '#666666',
                                        margin: 'md'
                                    },
                                    {
                                        type: 'text',
                                        text: reason,
                                        size: 'sm',
                                        wrap: true,
                                        margin: 'xs'
                                    }
                                ]
                            }
                        ]
                    },
                    footer: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: '‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤',
                                size: 'xs',
                                color: '#999999',
                                align: 'center'
                            }
                        ]
                    }
                }
            };

            const messages = [
                { type: 'text', text: message },
                flexMessage
            ];

            await this.client.pushMessage(userId, messages);
            return true;
        } catch (error) {
            console.error('Error sending leave request notification:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤
    async sendLeaveApprovalNotification(userId, approvalData) {
        try {
            const { status, leaveType, startDate, endDate, approvedBy, rejectionReason } = approvalData;
            
            let message = '';
            let stickerId = '2';
            
            if (status === 'approved') {
                message = `‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß\n\n`;
                message += `üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${textHelpers.getLeaveTypeText(leaveType)}\n`;
                message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateHelpers.formatDate(startDate)}`;
                
                if (startDate !== endDate) {
                    message += ` ‡∏ñ‡∏∂‡∏á ${dateHelpers.formatDate(endDate)}`;
                }
                
                message += `\nüë§ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢: ${approvedBy}\n`;
                message += `üéâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà!`;
                stickerId = '114';
            } else {
                message = `‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\n\n`;
                message += `üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${textHelpers.getLeaveTypeText(leaveType)}\n`;
                message += `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateHelpers.formatDate(startDate)}`;
                
                if (startDate !== endDate) {
                    message += ` ‡∏ñ‡∏∂‡∏á ${dateHelpers.formatDate(endDate)}`;
                }
                
                if (rejectionReason) {
                    message += `\n\nüí¨ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${rejectionReason}`;
                }
                
                message += `\n\nüìû ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ`;
                stickerId = '3';
            }

            const messages = [
                {
                    type: 'text',
                    text: message
                },
                {
                    type: 'sticker',
                    packageId: '1',
                    stickerId: stickerId
                }
            ];

            await this.client.pushMessage(userId, messages);
            return true;
        } catch (error) {
            console.error('Error sending leave approval notification:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏∑‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
    async sendMissedCheckOutReminder(userId, employeeName) {
        try {
            const message = `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏•‡∏∑‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå\n\n` +
                          `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${employeeName}\n` +
                          `‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ\n\n` +
                          `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å HR ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô\n` +
                          `‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô\n\n` +
                          `üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ‡πÅ‡∏ú‡∏ô‡∏Å HR`;

            await this.client.pushMessage(userId, {
                type: 'text',
                text: message
            });
            return true;
        } catch (error) {
            console.error('Error sending missed checkout reminder:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    async sendWeeklySummary(userId, summaryData) {
        try {
            const { employeeName, weekStart, weekEnd, totalDays, totalHours, overtimeHours, lateDays } = summaryData;
            
            const message = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå\n` +
                          `üìÖ ${dateHelpers.formatDate(weekStart)} - ${dateHelpers.formatDate(weekEnd)}\n\n` +
                          `üë§ ${employeeName}\n` +
                          `üìà ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${totalDays} ‡∏ß‡∏±‡∏ô\n` +
                          `‚è±Ô∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏£‡∏ß‡∏°: ${totalHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n` +
                          `üåô ‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${overtimeHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n` +
                          `‚ö†Ô∏è ‡∏°‡∏≤‡∏™‡∏≤‡∏¢: ${lateDays} ‡∏ß‡∏±‡∏ô\n\n` +
                          `üí™ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å!`;

            await this.client.pushMessage(userId, {
                type: 'text',
                text: message
            });
            return true;
        } catch (error) {
            console.error('Error sending weekly summary:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    async sendGeneralNotification(userId, title, message, urgent = false) {
        try {
            const icon = urgent ? 'üö®' : 'üì¢';
            const fullMessage = `${icon} ${title}\n\n${message}`;

            await this.client.pushMessage(userId, {
                type: 'text',
                text: fullMessage
            });
            return true;
        } catch (error) {
            console.error('Error sending general notification:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (Broadcast)
    async broadcastMessage(userIds, message) {
        try {
            const promises = userIds.map(userId => 
                this.client.pushMessage(userId, message).catch(error => {
                    console.error(`Failed to send message to ${userId}:`, error);
                    return null;
                })
            );

            const results = await Promise.allSettled(promises);
            const successCount = results.filter(result => result.status === 'fulfilled').length;
            
            console.log(`Broadcast completed: ${successCount}/${userIds.length} messages sent`);
            return { success: successCount, total: userIds.length };
        } catch (error) {
            console.error('Error broadcasting message:', error);
            return { success: 0, total: userIds.length };
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    async createDynamicRichMenu(menuData) {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu object
            const richMenu = {
                size: {
                    width: 2500,
                    height: 1686
                },
                selected: false,
                name: menuData.name,
                chatBarText: menuData.chatBarText,
                areas: menuData.areas
            };

            const richMenuId = await this.client.createRichMenu(richMenu);
            
            if (menuData.imageBuffer) {
                await this.client.setRichMenuImage(richMenuId, menuData.imageBuffer);
            }

            return richMenuId;
        } catch (error) {
            console.error('Error creating rich menu:', error);
            throw error;
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    async checkMessageDelivery(messageId) {
        try {
            // LINE API ‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
            // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ log ‡πÅ‡∏•‡∏∞ track ‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á
            console.log(`Checking delivery status for message: ${messageId}`);
            return { delivered: true, timestamp: new Date().toISOString() };
        } catch (error) {
            console.error('Error checking message delivery:', error);
            return { delivered: false, error: error.message };
        }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Template (Carousel, Buttons, etc.)
    async sendTemplateMessage(userId, template) {
        try {
            const message = {
                type: 'template',
                altText: template.altText || 'Template Message',
                template: template
            };

            await this.client.pushMessage(userId, message);
            return true;
        } catch (error) {
            console.error('Error sending template message:', error);
            return false;
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß
    createQuickReply(items) {
        return {
            items: items.map(item => ({
                type: 'action',
                action: {
                    type: item.type || 'message',
                    label: item.label,
                    text: item.text || item.label
                }
            }))
        };
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° Quick Reply
    async sendMessageWithQuickReply(userId, text, quickReplyItems) {
        try {
            const message = {
                type: 'text',
                text: text,
                quickReply: this.createQuickReply(quickReplyItems)
            };

            await this.client.pushMessage(userId, message);
            return true;
        } catch (error) {
            console.error('Error sending message with quick reply:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    async sendEmployeeCard(userId, employeeData) {
        try {
            const flexMessage = {
                type: 'flex',
                altText: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                contents: {
                    type: 'bubble',
                    header: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: 'üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                                weight: 'bold',
                                size: 'lg',
                                color: '#ffffff'
                            }
                        ],
                        backgroundColor: '#667eea',
                        paddingAll: 'lg'
                    },
                    body: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: employeeData.name,
                                weight: 'bold',
                                size: 'xl',
                                margin: 'md'
                            },
                            {
                                type: 'text',
                                text: `${employeeData.position} ‚Ä¢ ${employeeData.department}`,
                                size: 'sm',
                                color: '#666666',
                                margin: 'md'
                            },
                            {
                                type: 'separator',
                                margin: 'md'
                            },
                            {
                                type: 'box',
                                layout: 'vertical',
                                contents: [
                                    {
                                        type: 'box',
                                        layout: 'baseline',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:',
                                                size: 'sm',
                                                color: '#666666',
                                                flex: 3
                                            },
                                            {
                                                type: 'text',
                                                text: employeeData.employeeCode,
                                                size: 'sm',
                                                flex: 4
                                            }
                                        ],
                                        margin: 'md'
                                    },
                                    {
                                        type: 'box',
                                        layout: 'baseline',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô:',
                                                size: 'sm',
                                                color: '#666666',
                                                flex: 3
                                            },
                                            {
                                                type: 'text',
                                                text: dateHelpers.formatDate(employeeData.hireDate),
                                                size: 'sm',
                                                flex: 4
                                            }
                                        ],
                                        margin: 'md'
                                    }
                                ]
                            }
                        ]
                    },
                    footer: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'button',
                                action: {
                                    type: 'uri',
                                    label: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
                                    uri: `https://liff.line.me/${lineConfig.liffId}`
                                },
                                style: 'primary',
                                color: '#667eea'
                            }
                        ]
                    }
                }
            };

            await this.client.pushMessage(userId, flexMessage);
            return true;
        } catch (error) {
            console.error('Error sending employee card:', error);
            return false;
        }
    }

    // ‡∏™‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    async sendWorkStatistics(userId, statsData) {
        try {
            const { monthYear, totalDays, presentDays, lateDays, totalHours, overtimeHours } = statsData;
            
            const attendanceRate = ((presentDays / totalDays) * 100).toFixed(1);
            
            const flexMessage = {
                type: 'flex',
                altText: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                contents: {
                    type: 'bubble',
                    header: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                                weight: 'bold',
                                size: 'lg',
                                color: '#ffffff'
                            },
                            {
                                type: 'text',
                                text: monthYear,
                                size: 'sm',
                                color: '#ffffff',
                                margin: 'xs'
                            }
                        ],
                        backgroundColor: '#667eea',
                        paddingAll: 'lg'
                    },
                    body: {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'box',
                                layout: 'horizontal',
                                contents: [
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: presentDays.toString(),
                                                size: 'xl',
                                                weight: 'bold',
                                                color: '#4CAF50',
                                                align: 'center'
                                            },
                                            {
                                                type: 'text',
                                                text: '‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                                                size: 'xs',
                                                color: '#666666',
                                                align: 'center'
                                            }
                                        ],
                                        flex: 1
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: lateDays.toString(),
                                                size: 'xl',
                                                weight: 'bold',
                                                color: '#FF9800',
                                                align: 'center'
                                            },
                                            {
                                                type: 'text',
                                                text: '‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏™‡∏≤‡∏¢',
                                                size: 'xs',
                                                color: '#666666',
                                                align: 'center'
                                            }
                                        ],
                                        flex: 1
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: `${attendanceRate}%`,
                                                size: 'xl',
                                                weight: 'bold',
                                                color: '#2196F3',
                                                align: 'center'
                                            },
                                            {
                                                type: 'text',
                                                text: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô',
                                                size: 'xs',
                                                color: '#666666',
                                                align: 'center'
                                            }
                                        ],
                                        flex: 1
                                    }
                                ],
                                margin: 'lg'
                            },
                            {
                                type: 'separator',
                                margin: 'lg'
                            },
                            {
                                type: 'box',
                                layout: 'vertical',
                                contents: [
                                    {
                                        type: 'box',
                                        layout: 'baseline',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°:',
                                                size: 'sm',
                                                color: '#666666',
                                                flex: 3
                                            },
                                            {
                                                type: 'text',
                                                text: `${totalHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
                                                size: 'sm',
                                                flex: 2,
                                                align: 'end'
                                            }
                                        ],
                                        margin: 'lg'
                                    },
                                    {
                                        type: 'box',
                                        layout: 'baseline',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:',
                                                size: 'sm',
                                                color: '#666666',
                                                flex: 3
                                            },
                                            {
                                                type: 'text',
                                                text: `${overtimeHours.toFixed(1)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
                                                size: 'sm',
                                                flex: 2,
                                                align: 'end'
                                            }
                                        ],
                                        margin: 'md'
                                    }
                                ]
                            }
                        ]
                    }
                }
            };

            await this.client.pushMessage(userId, flexMessage);
            return true;
        } catch (error) {
            console.error('Error sending work statistics:', error);
            return false;
        }
    }
}

module.exports = new LineMessagingService();