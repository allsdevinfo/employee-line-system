// utils/helpers.js
const moment = require('moment');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
const dateHelpers = {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    formatDate(date, format = 'DD/MM/YYYY') {
        return moment(date).format(format);
    },

    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    formatTime(time, format = 'HH:mm') {
        return moment(time, 'HH:mm:ss').format(format);
    },

    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    formatDateTime(datetime, format = 'DD/MM/YYYY HH:mm') {
        return moment(datetime).format(format);
    },

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    isWorkingDay(date) {
        const day = moment(date).day();
        return day >= 1 && day <= 5; // 1=Monday, 5=Friday
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    getWorkingDaysBetween(startDate, endDate) {
        let count = 0;
        const current = moment(startDate);
        const end = moment(endDate);

        while (current.isSameOrBefore(end)) {
            if (this.isWorkingDay(current)) {
                count++;
            }
            current.add(1, 'day');
        }

        return count;
    },

    // ‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
    getCurrentDate() {
        return moment().format('YYYY-MM-DD');
    },

    // ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm:ss
    getCurrentTime() {
        return moment().format('HH:mm:ss');
    },

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    isWorkingHours(startTime = '09:00:00', endTime = '18:00:00') {
        const now = moment();
        const start = moment(startTime, 'HH:mm:ss');
        const end = moment(endTime, 'HH:mm:ss');
        const currentTime = moment(now.format('HH:mm:ss'), 'HH:mm:ss');

        return currentTime.isBetween(start, end, 'minute', '[]');
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏á‡∏≤‡∏ô
    calculateWorkingYears(hireDate) {
        return moment().diff(moment(hireDate), 'years');
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
const timeCalculators = {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å
    calculateWorkHours(checkIn, checkOut, breakHours = 1) {
        if (!checkIn || !checkOut) return 0;

        const start = moment(checkIn, 'HH:mm:ss');
        const end = moment(checkOut, 'HH:mm:ss');
        const duration = moment.duration(end.diff(start));
        const totalHours = duration.asHours();

        return Math.max(0, totalHours - breakHours);
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    calculateOvertimeHours(workHours, standardHours = 8) {
        return Math.max(0, workHours - standardHours);
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    calculateOvertimePay(overtimeHours, hourlyRate, multiplier = 1.5) {
        return overtimeHours * hourlyRate * multiplier;
    },

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    isLate(checkInTime, standardStartTime = '09:00:00', lateThresholdMinutes = 15) {
        const checkIn = moment(checkInTime, 'HH:mm:ss');
        const standardStart = moment(standardStartTime, 'HH:mm:ss');
        const lateThreshold = standardStart.clone().add(lateThresholdMinutes, 'minutes');

        return checkIn.isAfter(lateThreshold);
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≤‡∏¢ (‡∏ô‡∏≤‡∏ó‡∏µ)
    calculateLateMinutes(checkInTime, standardStartTime = '09:00:00') {
        const checkIn = moment(checkInTime, 'HH:mm:ss');
        const standardStart = moment(standardStartTime, 'HH:mm:ss');

        if (checkIn.isAfter(standardStart)) {
            return moment.duration(checkIn.diff(standardStart)).asMinutes();
        }

        return 0;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
const textHelpers = {
    // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
    truncateText(text, maxLength = 100, suffix = '...') {
        if (!text || text.length <= maxLength) return text;
        return text.substring(0, maxLength).trim() + suffix;
    },

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    getStatusText(status) {
        const statusMap = {
            'present': '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥',
            'late': '‚ö†Ô∏è ‡∏™‡∏≤‡∏¢',
            'absent': '‚ùå ‡∏Ç‡∏≤‡∏î‡∏á‡∏≤‡∏ô',
            'half_day': '‚è∞ ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô',
            'holiday': 'üèñÔ∏è ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î',
            'pending': '‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
            'approved': '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
            'rejected': '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
            'cancelled': 'üö´‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            'active': 'üü¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'inactive': 'üî¥ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        };

        return statusMap[status] || status;
    },

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    getLeaveTypeText(type) {
        const typeMap = {
            'sick': 'üè• ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢',
            'personal': 'üë§ ‡∏•‡∏≤‡∏ò‡∏∏‡∏£‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
            'vacation': 'üå¥ ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô',
            'emergency': 'üö® ‡∏•‡∏≤‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
            'maternity': 'üë∂ ‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î',
            'paternity': 'üë®‚Äçüë∂ ‡∏•‡∏≤‡∏ö‡∏¥‡∏î‡∏≤',
            'annual': 'üìÖ ‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ'
        };

        return typeMap[type] || type;
    },

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    generateReference(prefix = '', length = 8) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = prefix;
        
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        return result;
    },

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
    maskSensitiveData(data, type = 'phone') {
        if (!data) return '';

        switch (type) {
            case 'phone':
                if (data.length >= 10) {
                    return data.substring(0, 3) + '****' + data.substring(7);
                }
                break;
            case 'email':
                const [username, domain] = data.split('@');
                if (username && domain) {
                    const maskedUsername = username.substring(0, 2) + '****';
                    return maskedUsername + '@' + domain;
                }
                break;
        }

        return data;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
const dataHelpers = {
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏á‡∏¥‡∏ô
    formatCurrency(amount, currency = 'THB') {
        const formatter = new Intl.NumberFormat('th-TH', {
            style: 'currency',
            currency: currency,
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        });

        return formatter.format(amount || 0);
    },

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    formatNumber(number, decimals = 0) {
        return new Intl.NumberFormat('th-TH', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(number || 0);
    },

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    calculatePercentage(value, total, decimals = 1) {
        if (!total || total === 0) return 0;
        return ((value / total) * 100).toFixed(decimals);
    },

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    isEmpty(obj) {
        return !obj || Object.keys(obj).length === 0;
    },

    // ‡∏•‡∏ö property ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ undefined
    removeNullValues(obj) {
        const cleaned = {};
        
        Object.keys(obj).forEach(key => {
            if (obj[key] !== null && obj[key] !== undefined) {
                cleaned[key] = obj[key];
            }
        });
        
        return cleaned;
    },

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á pagination object
    createPagination(currentPage, totalItems, itemsPerPage = 10) {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const offset = (currentPage - 1) * itemsPerPage;

        return {
            currentPage: parseInt(currentPage),
            totalPages,
            totalItems,
            itemsPerPage,
            offset,
            hasNext: currentPage < totalPages,
            hasPrev: currentPage > 1
        };
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ response
const responseHelpers = {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á success response
    success(data = null, message = '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', meta = null) {
        const response = {
            success: true,
            message,
            timestamp: new Date().toISOString()
        };

        if (data !== null) {
            response.data = data;
        }

        if (meta) {
            response.meta = meta;
        }

        return response;
    },

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á error response
    error(message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', code = 'UNKNOWN_ERROR', details = null) {
        const response = {
            success: false,
            error: message,
            code,
            timestamp: new Date().toISOString()
        };

        if (details) {
            response.details = details;
        }

        return response;
    },

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á paginated response
    paginated(data, pagination, message = '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
        return {
            success: true,
            message,
            data,
            pagination,
            timestamp: new Date().toISOString()
        };
    }
};

module.exports = {
    dateHelpers,
    timeCalculators,
    textHelpers,
    dataHelpers,
    responseHelpers
};